

package org.jetbrains.reflekt.plugin.compiler.runners.general;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link GenerateNewCompilerTests.kt}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("reflekt-plugin/src/test/resources/org/jetbrains/reflekt/plugin/compiler/code-gen/general-library-calling")
@TestDataPath("$PROJECT_ROOT")
public class ReflektWithLibraryTestGenerated extends AbstractReflektWithLibraryTest {
    @Test
    public void testAllFilesPresentInGeneral_library_calling() throws Exception {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("reflekt-plugin/src/test/resources/org/jetbrains/reflekt/plugin/compiler/code-gen/general-library-calling"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.expected\\.kt?$"), TargetBackend.JVM_IR, true);
    }

    @Nested
    @TestMetadata("reflekt-plugin/src/test/resources/org/jetbrains/reflekt/plugin/compiler/code-gen/general-library-calling/classes")
    @TestDataPath("$PROJECT_ROOT")
    public class Classes {
        @Test
        public void testAllFilesPresentInClasses() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("reflekt-plugin/src/test/resources/org/jetbrains/reflekt/plugin/compiler/code-gen/general-library-calling/classes"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.expected\\.kt?$"), TargetBackend.JVM_IR, true);
        }

        @Nested
        @TestMetadata("reflekt-plugin/src/test/resources/org/jetbrains/reflekt/plugin/compiler/code-gen/general-library-calling/classes/classes-1")
        @TestDataPath("$PROJECT_ROOT")
        public class Classes_1 {
            @Test
            public void testAllFilesPresentInClasses_1() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("reflekt-plugin/src/test/resources/org/jetbrains/reflekt/plugin/compiler/code-gen/general-library-calling/classes/classes-1"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.expected\\.kt?$"), TargetBackend.JVM_IR, true);
            }

            @Test
            @TestMetadata("classes-1.kt")
            public void testClasses_1() throws Exception {
                runTest("reflekt-plugin/src/test/resources/org/jetbrains/reflekt/plugin/compiler/code-gen/general-library-calling/classes/classes-1/classes-1.kt");
            }
        }

        @Nested
        @TestMetadata("reflekt-plugin/src/test/resources/org/jetbrains/reflekt/plugin/compiler/code-gen/general-library-calling/classes/classes-2")
        @TestDataPath("$PROJECT_ROOT")
        public class Classes_2 {
            @Test
            public void testAllFilesPresentInClasses_2() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("reflekt-plugin/src/test/resources/org/jetbrains/reflekt/plugin/compiler/code-gen/general-library-calling/classes/classes-2"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.expected\\.kt?$"), TargetBackend.JVM_IR, true);
            }

            @Test
            @TestMetadata("classes-2.kt")
            public void testClasses_2() throws Exception {
                runTest("reflekt-plugin/src/test/resources/org/jetbrains/reflekt/plugin/compiler/code-gen/general-library-calling/classes/classes-2/classes-2.kt");
            }
        }

        @Nested
        @TestMetadata("reflekt-plugin/src/test/resources/org/jetbrains/reflekt/plugin/compiler/code-gen/general-library-calling/classes/classes-3")
        @TestDataPath("$PROJECT_ROOT")
        public class Classes_3 {
            @Test
            public void testAllFilesPresentInClasses_3() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("reflekt-plugin/src/test/resources/org/jetbrains/reflekt/plugin/compiler/code-gen/general-library-calling/classes/classes-3"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.expected\\.kt?$"), TargetBackend.JVM_IR, true);
            }

            @Test
            @TestMetadata("classes-3.kt")
            public void testClasses_3() throws Exception {
                runTest("reflekt-plugin/src/test/resources/org/jetbrains/reflekt/plugin/compiler/code-gen/general-library-calling/classes/classes-3/classes-3.kt");
            }
        }

        @Nested
        @TestMetadata("reflekt-plugin/src/test/resources/org/jetbrains/reflekt/plugin/compiler/code-gen/general-library-calling/classes/classes-4")
        @TestDataPath("$PROJECT_ROOT")
        public class Classes_4 {
            @Test
            public void testAllFilesPresentInClasses_4() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("reflekt-plugin/src/test/resources/org/jetbrains/reflekt/plugin/compiler/code-gen/general-library-calling/classes/classes-4"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.expected\\.kt?$"), TargetBackend.JVM_IR, true);
            }

            @Test
            @TestMetadata("classes-4.kt")
            public void testClasses_4() throws Exception {
                runTest("reflekt-plugin/src/test/resources/org/jetbrains/reflekt/plugin/compiler/code-gen/general-library-calling/classes/classes-4/classes-4.kt");
            }
        }

        @Nested
        @TestMetadata("reflekt-plugin/src/test/resources/org/jetbrains/reflekt/plugin/compiler/code-gen/general-library-calling/classes/classes-5")
        @TestDataPath("$PROJECT_ROOT")
        public class Classes_5 {
            @Test
            public void testAllFilesPresentInClasses_5() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("reflekt-plugin/src/test/resources/org/jetbrains/reflekt/plugin/compiler/code-gen/general-library-calling/classes/classes-5"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.expected\\.kt?$"), TargetBackend.JVM_IR, true);
            }

            @Test
            @TestMetadata("classes-5.kt")
            public void testClasses_5() throws Exception {
                runTest("reflekt-plugin/src/test/resources/org/jetbrains/reflekt/plugin/compiler/code-gen/general-library-calling/classes/classes-5/classes-5.kt");
            }
        }
    }

    @Nested
    @TestMetadata("reflekt-plugin/src/test/resources/org/jetbrains/reflekt/plugin/compiler/code-gen/general-library-calling/objects")
    @TestDataPath("$PROJECT_ROOT")
    public class Objects {
        @Test
        public void testAllFilesPresentInObjects() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("reflekt-plugin/src/test/resources/org/jetbrains/reflekt/plugin/compiler/code-gen/general-library-calling/objects"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.expected\\.kt?$"), TargetBackend.JVM_IR, true);
        }

        @Nested
        @TestMetadata("reflekt-plugin/src/test/resources/org/jetbrains/reflekt/plugin/compiler/code-gen/general-library-calling/objects/objects-1")
        @TestDataPath("$PROJECT_ROOT")
        public class Objects_1 {
            @Test
            public void testAllFilesPresentInObjects_1() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("reflekt-plugin/src/test/resources/org/jetbrains/reflekt/plugin/compiler/code-gen/general-library-calling/objects/objects-1"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.expected\\.kt?$"), TargetBackend.JVM_IR, true);
            }

            @Test
            @TestMetadata("objects-1.kt")
            public void testObjects_1() throws Exception {
                runTest("reflekt-plugin/src/test/resources/org/jetbrains/reflekt/plugin/compiler/code-gen/general-library-calling/objects/objects-1/objects-1.kt");
            }
        }

        @Nested
        @TestMetadata("reflekt-plugin/src/test/resources/org/jetbrains/reflekt/plugin/compiler/code-gen/general-library-calling/objects/objects-2")
        @TestDataPath("$PROJECT_ROOT")
        public class Objects_2 {
            @Test
            public void testAllFilesPresentInObjects_2() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("reflekt-plugin/src/test/resources/org/jetbrains/reflekt/plugin/compiler/code-gen/general-library-calling/objects/objects-2"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.expected\\.kt?$"), TargetBackend.JVM_IR, true);
            }

            @Test
            @TestMetadata("objects-2.kt")
            public void testObjects_2() throws Exception {
                runTest("reflekt-plugin/src/test/resources/org/jetbrains/reflekt/plugin/compiler/code-gen/general-library-calling/objects/objects-2/objects-2.kt");
            }
        }

        @Nested
        @TestMetadata("reflekt-plugin/src/test/resources/org/jetbrains/reflekt/plugin/compiler/code-gen/general-library-calling/objects/objects-3")
        @TestDataPath("$PROJECT_ROOT")
        public class Objects_3 {
            @Test
            public void testAllFilesPresentInObjects_3() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("reflekt-plugin/src/test/resources/org/jetbrains/reflekt/plugin/compiler/code-gen/general-library-calling/objects/objects-3"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.expected\\.kt?$"), TargetBackend.JVM_IR, true);
            }

            @Test
            @TestMetadata("objects-3.kt")
            public void testObjects_3() throws Exception {
                runTest("reflekt-plugin/src/test/resources/org/jetbrains/reflekt/plugin/compiler/code-gen/general-library-calling/objects/objects-3/objects-3.kt");
            }
        }

        @Nested
        @TestMetadata("reflekt-plugin/src/test/resources/org/jetbrains/reflekt/plugin/compiler/code-gen/general-library-calling/objects/objects-4")
        @TestDataPath("$PROJECT_ROOT")
        public class Objects_4 {
            @Test
            public void testAllFilesPresentInObjects_4() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("reflekt-plugin/src/test/resources/org/jetbrains/reflekt/plugin/compiler/code-gen/general-library-calling/objects/objects-4"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.expected\\.kt?$"), TargetBackend.JVM_IR, true);
            }

            @Test
            @TestMetadata("objects-4.kt")
            public void testObjects_4() throws Exception {
                runTest("reflekt-plugin/src/test/resources/org/jetbrains/reflekt/plugin/compiler/code-gen/general-library-calling/objects/objects-4/objects-4.kt");
            }
        }

        @Nested
        @TestMetadata("reflekt-plugin/src/test/resources/org/jetbrains/reflekt/plugin/compiler/code-gen/general-library-calling/objects/objects-5")
        @TestDataPath("$PROJECT_ROOT")
        public class Objects_5 {
            @Test
            public void testAllFilesPresentInObjects_5() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("reflekt-plugin/src/test/resources/org/jetbrains/reflekt/plugin/compiler/code-gen/general-library-calling/objects/objects-5"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.expected\\.kt?$"), TargetBackend.JVM_IR, true);
            }

            @Test
            @TestMetadata("objects-5.kt")
            public void testObjects_5() throws Exception {
                runTest("reflekt-plugin/src/test/resources/org/jetbrains/reflekt/plugin/compiler/code-gen/general-library-calling/objects/objects-5/objects-5.kt");
            }
        }
    }
}
